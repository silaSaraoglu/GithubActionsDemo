name: run-integration-tests
on:
  schedule:
    - cron: "0 9 * * *"
  workflow_dispatch:
    inputs:
      test-case:
        description: Test case to run for
        required: false
        type: choice
        default: all
        options:
          - all
          - option_1
          - option_2
          - option_3
      tags:
        description: tags
        required: false
        type: string
      import:
        description: 'import'
        required: false
        type: boolean
      test-plan:
        description: 'test-plan'
        required: false
        type: string
jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Init
        id: variables
        run: |
          echo "Executing integration tests"
          if [ "${{ inputs.test-case }}" == "all" ]; then
            TEST_CASES='["option_1", "option_2", "option_3"]'
          elif [ "${{ inputs.test-case }}" == "" ]; then
            TEST_CASES='["option_1", "option_2", "option_3"]'
          else
            TEST_CASES='["${{ inputs.test-case }}"]'
          fi
          echo "Test cases: $TEST_CASES"
          echo "TEST_CASES=$TEST_CASES" >> $GITHUB_OUTPUT
          TEST_TAGS="${{ github.event.inputs.tags }}"

          if [ -z "$TEST_TAGS" &&  ${{ github.event_name }} == "workflow_dispatch" ]; then
            echo "Error: TEST_TAGS is empty - select a tag or all to run all the tests"
            exit 1
          fi

          if [ "$TEST_TAGS" == "all"]; then
            TEST_TAGS=""
          fi

          echo "Test tags: $TEST_TAGS"
          echo "Test cases: $TEST_CASES"
          echo "${{ github.event.inputs.import }}"
          echo "${{ github.event.inputs.test-plan }}"

          echo "TEST_TAGS=$TEST_TAGS" >> $GITHUB_OUTPUT
        shell: bash
    outputs:
      TEST_CASES: ${{ steps.variables.outputs.TEST_CASES }}
  run-tests:
    runs-on: ubuntu-latest
    needs:
      - init
    strategy:
      fail-fast: false
      matrix:
        test-cases: ${{ fromJSON(needs.init.outputs.TEST_CASES) }}
    steps:
      - name: Run ${{matrix.test-cases}} integration tests
        id: run_tests_step
        run: |
          echo "Running integration tests with parameter ${{ matrix.test-cases }}"
          echo "exit_code=${{ matrix.test-cases }}" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: Run Makefile
        id: run_make
        run: |
            make run
            EXIT_CODE=$? 
            echo "$EXIT_CODE"
      - name: Create ${{matrix.test-cases}} txt
        id: create_sample_txt
        run: |
          echo "This is a test file ${{matrix.test-cases}}" > myfile-${{matrix.test-cases}}.txt
          # Loop through each test case and upload the corresponding file
      - name: Upload each file as an artifact
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          # The name is based on the matrix value, and we are uploading each dynamically created file
          name: "artifact-${{ matrix.test-cases }}" # Artifact name based on test case
          path: "myfile-${{ matrix.test-cases }}.txt"
      - name: Set dynamic slack message payload
        id: set-payload
        if: github.event_name == 'schedule'
        run: |  
          if [ "${{ steps.run_tests_step.outputs.exit_code}}" == "0" ]; then
            echo "color=#36a64f" >> "$GITHUB_OUTPUT"
            echo "text= There are no test cases failing in ${{ matrix.test-cases }} :white_check_mark:" >> "$GITHUB_OUTPUT"
          else
            echo "color=#e64f36" >> "$GITHUB_OUTPUT"
            echo "text= There are *${{ steps.run_tests_step.outputs.exit_code }}* failing tests in ${{ matrix.test-cases }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Send slack message
        if: github.event_name == 'schedule'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{secrets.SLACK_WEBHOOK_URL}}
          webhook-type: incoming-webhook
          payload: |
            {
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "${{ steps.set-payload.outputs.color }}",
                  "text": "${{ steps.set-payload.outputs.text}}",
                  "actions": [
                    {
                      "url": "${{ steps.upload_artifact.outputs.artifact-url }}",
                      "type": "button",
                      "text" : "View logs"
                    },
                  ]
                }
              ]
            }

  integration-tests-status:
    runs-on: ubuntu-latest
    needs:
      - init
      - run-tests
    if: always()
    steps:
      - name: Successful tests
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: exit 0
      - name: Failing tests
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
